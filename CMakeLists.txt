cmake_minimum_required(VERSION 3.0)
project(sea)
set(PROJECT_SOURCE_DIR .)

SET(COVERAGE OFF CACHE BOOL "Coverage")

# Project Structure
set(LIBRARY_OUTPUT_PATH lib)                                    # generated library files
set(EXECUTABLE_OUTPUT_PATH bin)                                 # generated binary files
set(CMAKE_INCLUDE_PATH include/)


set(CMAKE_INCLUDE_CURRENT_DIR ON)

# --------------------------------------------------- #
#                   Dependencies
# --------------------------------------------------- #
include(ExternalProject)
find_program(MAKE NAMES cmake make)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# --------------------------------------------------- #
#                   gtest library
# --------------------------------------------------- #
ExternalProject_Add(GTEST_PROJECT
        GIT_REPOSITORY https://github.com/google/googletest.git
        PREFIX ${CMAKE_CURRENT_BINARY_DIR}/third-party/gtest
        CMAKE_ARGS "-DBUILD_GTEST=ON -DBUILD_GMOCK=OFF -DINSTALL_GTEST=OFF -DINSTALL_GMOCK=OFF"
        INSTALL_COMMAND ""
        BUILD_COMMAND "${MAKE}" --build .)

ExternalProject_Get_Property(GTEST_PROJECT source_dir)
ExternalProject_Get_Property(GTEST_PROJECT binary_dir)
set(GOOGLETEST_ROOT ${source_dir})
set(GOOGLETEST_BIN ${binary_dir})
MESSAGE(STATUS "GTest source_dir: ${GOOGLETEST_ROOT}")
MESSAGE(STATUS "GTest build_dir: ${GOOGLETEST_BIN}")

include_directories(SYSTEM ${GOOGLETEST_ROOT}/googletest/)
include_directories(SYSTEM ${GOOGLETEST_ROOT}/googletest/include)
add_library(gtest STATIC IMPORTED)
add_dependencies(gtest GTEST_PROJECT)
set_property(TARGET gtest PROPERTY IMPORTED_LOCATION "${GOOGLETEST_BIN}/googlemock/gtest/libgtest.a")

# --------------------------------------------------- #
#                   Boost library
# --------------------------------------------------- #
set( Boost_Bootstrap_Command )
if( UNIX )
        set( Boost_Bootstrap_Command ./bootstrap.sh )
        set( Boost_b2_Command ./b2 )
else()
        if( WIN32 )
                set( Boost_Bootstrap_Command bootstrap.bat )
                set( Boost_b2_Command b2.exe )
        endif()
endif()

ExternalProject_Add(BOOST_PROJECT
        URL https://sourceforge.net/projects/boost/files/boost/1.62.0/boost_1_62_0.tar.bz2
        PREFIX ${CMAKE_CURRENT_BINARY_DIR}/third-party/boost
        BUILD_IN_SOURCE 1
        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        CONFIGURE_COMMAND ${Boost_Bootstrap_Command}
        BUILD_COMMAND  ${Boost_b2_Command} install
        --without-python
        --without-mpi
        --without-random
        --without-log
        --without-regex
        --without-serialization
        --without-test
        --without-thread
        --without-timer
        --without-type_erasure
        --without-wave
        --without-atomic
        --without-chrono
        --without-container
        --without-context
        --without-coroutine
        --without-date_time
        --without-exception
        --without-fiber
        --without-filesystem
        --without-locale
        --without-signals
        --without-program_options
        --without-math
        --without-iostreams
        --without-graph_parallel
        --without-graph
        --without-system
        --disable-icu
        --prefix=${CMAKE_CURRENT_BINARY_DIR}/third-party/boost
        --threading=single,multi
        --link=shared
        --variant=release
        -j8
        INSTALL_COMMAND "")

ExternalProject_Get_Property(BOOST_PROJECT install_dir)

set(Boost_INCLUDE_DIR ${install_dir}/include/ )

#add_library(boost STATIC IMPORTED)
#add_dependencies(boost BOOST_PROJECT)
#set_property(TARGET boost PROPERTY IMPORTED_LOCATION "${install_dir}/lib/libboost_system.a")
#MESSAGE(STATUS "BOOST: ${Boost_INCLUDE_DIR}")

# --------------------------------------------------- #
#                   build library
# --------------------------------------------------- #
include_directories(${Boost_INCLUDE_DIR} ${CMAKE_INCLUDE_PATH})
file(GLOB LIB_SOURCES "src/*.cpp")

add_library(sealib SHARED ${LIB_SOURCES})
add_dependencies(sealib BOOST_PROJECT)
target_compile_options(sealib PRIVATE -std=c++11 -g -Wall -Werror -Wextra -Wpedantic -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)

# --------------------------------------------------- #
#                   build tests
# --------------------------------------------------- #
file(GLOB TESTS "test/*.cpp")                                   # all test files
add_executable(tests ${LIB_SOURCES} ${TESTS})
add_dependencies(tests gtest)
find_package(Threads)
target_link_libraries(tests gtest ${CMAKE_THREAD_LIBS_INIT})
target_compile_options(tests PRIVATE -std=c++11 -g -Wall -Werror -Wextra -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)

if (COVERAGE)
        MESSAGE(STATUS "Link Coverage")
        target_compile_options(tests PRIVATE --coverage)
        target_link_libraries(tests --coverage)
endif ()