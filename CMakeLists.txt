cmake_minimum_required(VERSION 3.9)
project(sea)
#set(PROJECT_SOURCE_DIR .)
include(gtest.cmake)

SET(COVERAGE OFF CACHE BOOL "Coverage")

# Project Structure
set(LIBRARY_OUTPUT_PATH lib)                                    # generated library files
set(EXECUTABLE_OUTPUT_PATH bin)

set(MAIN_FILE ${CMAKE_SOURCE_DIR}/src/main.cpp)                 # full name of the main file
set(CMAKE_INCLUDE_PATH include/)                                # all headers
file(GLOB SOURCES "src/*.cpp")                                  # all sources inside src/ except for the main file
list(REMOVE_ITEM SOURCES ${MAIN_FILE})
file(GLOB TESTS "test/*.cpp") # all test files

find_package(Boost REQUIRED)
include_directories( ${Boost_INCLUDE_DIRS} )


find_package(OGDF CONFIG PATHS "ogdf" REQUIRED)
if(NOT OGDF_FOUND)
    message(FATAL_ERROR "No OGDF configuration for CMake has been found. "
            "Please set OGDF_CONFIG_SEARCH_PATH such that ogdf-config.cmake (generated by your OGDF build) can be found.")
endif()

# QT STUFF
set(SOURCE_FILES
        src/main.cpp
        src/mainwindow.cpp
        )

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
# Include Qt basic functions
include(QtCommon)

set(RESOURCE_FILES example.qrc)
find_package(Qt5Widgets REQUIRED)

include_directories(${CMAKE_INCLUDE_PATH})

add_library(sealib SHARED ${SOURCES} ${SOURCE_FILES})

add_executable(sealib_main ${MAIN_FILE} ${SOURCES} ${OS_BUNDLE} # Expands to WIN32 or MACOS_BUNDLE depending on OS
        ${SOURCE_FILES} ${META_FILES_TO_INCLUDE} ${RESOURCE_FILES} ${OGDF_INCLUDE_DIRS})
target_include_directories(sealib_main PRIVATE ${OGDF_INCLUDE_DIRS})
target_link_libraries(sealib_main OGDF)

qt5_use_modules(sealib_main Widgets)

add_executable(tests ${SOURCES} ${TESTS})
find_package (Threads)
target_link_libraries(tests gtest ${CMAKE_THREAD_LIBS_INIT})

if (MSVC)
    target_compile_options(tests PRIVATE /std:c++17 /W4 /WX)
    target_compile_options(sealib_main PRIVATE /std:c++17 /W4 /WX)

    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Od")

    # VS 2017 removed tr1
    add_definitions(-DGTEST_HAS_TR1_TUPLE=0)
else()
    target_compile_options(tests PRIVATE -std=c++14 -g -Wall -Werror -Wextra -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)
    target_compile_options(sealib_main PRIVATE -std=c++14 -g -Wall -Werror -Wextra -Wpedantic -Wconversion -Wswitch-default -Wswitch-enum -Wunreachable-code -Wwrite-strings -Wcast-align -Wshadow -Wundef)

    if (COVERAGE)
        MESSAGE( STATUS "Link Coverage")
        target_compile_options(tests PRIVATE --coverage)
        target_link_libraries(tests --coverage)
    endif()
endif()